import pymysql
import requests
import json
import os
import sys
import subprocess
import random
from retrying import retry
from datetime import datetime

myToken = ''#token

def post_message(token, channel, text):
    response = requests.post("https://slack.com/api/chat.postMessage",
                             headers={"Authorization": "Bearer " + token},
                             data={"channel": channel, "text": text})
    print(response)

def dbgout(message):
    print(datetime.now().strftime('[%m/%d %H:%M:%S]'), message)
    strbuf = datetime.now().strftime('[%m/%d %H:%M:%S] ') + message
    post_message(myToken, "#test", strbuf)

@retry(wait_random_min=1000, wait_random_max=2000)
def wait_random_1_to_2_s():
    print("Randomly wait 1 to 2 seconds between retries")

    ipInfoURL = "https://public.api.malwares.com/v3/ip/info"
    conn = pymysql.connect(host="/*aws instance public IPv4 address*/", user='root', password=pwd, database='malware_api_db', charset='utf8') 

    while True:
        cursor = conn.cursor()
        f = open('/var/log/apache2/access.log',"r")
        logs = f.readlines() 
        f = open('/var/log/apache2/access.log',"w")
        for log in logs[1:]:
            f.write(log)
        ip = logs[0].split()
        params = {
        "api_key" : '/*malware_api_key*/',
        "ip" : ip[0]
        }
        response = requests.get(ipInfoURL, params=params)
        result = response.json()

        print(type(result))
        print(result.get("ip"))

        risk_score = result.get("detected_url").get("total") + result.get("detected_downloaded_file").get("total") + result.get("detected_communicating_file").get("total")
        #print("risk_score :"+risk_score)

        if risk_score <= 50 and risk_score > 0 : 
            sql = "INSERT INTO IP_Low (ip, detected_url_total, detected_downloaded_file_total, detected_communicating_file_total, risk_score) VALUES (%s, %s, %s, %s, %s)"
            cursor.execute(sql,(result.get("ip"), result.get("detected_url").get("total"), result.get("detected_downloaded_file").get("total"), result.get("detected_communicating_file").get("total"), risk_score))
            subprocess.call(["iptables", "-A", "INPUT", "-s", result.get("ip"), "-m", "time", "--timestop", "21:00", "-j", "DROP"])#21:00(UTC) = 한국시간 - 9
            dbgout(result.get("ip")+' 위험도 낮음수준의 IP가 감지되어 접근제어가 시작되었습니다.')
        elif risk_score <= 500 and risk_score > 50 :
            sql = "INSERT INTO IP_Medium (ip, detected_url_total, detected_downloaded_file_total, detected_communicating_file_total, risk_score) VALUES (%s, %s, %s, %s, %s)"
            cursor.execute(sql,(result.get("ip"), result.get("detected_url").get("total"), result.get("detected_downloaded_file").get("total"), result.get("detected_communicating_file").get("total"), risk_score))
            subprocess.call(["iptables", "-A", "INPUT", "-s", result.get("ip"), "-m", "time", "--timestop", "21:00", "-j", "DROP"])
            dbgout(result.get("ip")+' 위험도 중간수준의 IP가 감지되어 접근제어가 시작되었습니다.')
        elif risk_score > 500 :
            sql = "INSERT INTO IP_High (ip, detected_url_total, detected_downloaded_file_total, detected_communicating_file_total, risk_score) VALUES (%s, %s, %s, %s, %s)"
            cursor.execute(sql,(result.get("ip"), result.get("detected_url").get("total"), result.get("detected_downloaded_file").get("total"), result.get("detected_communicating_file").get("total"), risk_score))
            subprocess.call(["iptables", "-A", "INPUT", "-s", result.get("ip"), "-m", "time", "--timestop", "21:00", "-j", "DROP"])
            dbgout(result.get("ip")+' 위험도 높음수준의 IP가 감지되어 접근제어가 시작되었습니다.')
        else:
            sql = "INSERT INTO IP_Normal (ip, detected_url_total, detected_downloaded_file_total, detected_communicating_file_total, risk_score) VALUES (%s, %s, %s, %s, %s)"
            cursor.execute(sql,(result.get("ip"), result.get("detected_url").get("total"), result.get("detected_downloaded_file").get("total"), result.get("detected_communicating_file").get("total"), risk_score))

                
        sql = "INSERT INTO IP_INFO (ip, detected_url_total, undetected_communicating_file_total, undetected_downloaded_file_total, detected_downloaded_file_total, hostname_history_total, undetected_url_total, detected_communicating_file_total) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)" #파이썬은 int형도 %s로 쓴답니다.
        cursor.execute(
        sql,
        (
        result.get("ip"),
        result.get("detected_url").get("total"),
        result.get("undetected_communicating_file").get("total"),
        result.get("undetected_downloaded_file").get("total"),
        result.get("detected_downloaded_file").get("total"),
        result.get("hostname_history").get("total"),
        result.get("undetected_url").get("total"),
        result.get("detected_communicating_file").get("total")))

        conn.commit() 
    conn.close() 
wait_random_1_to_2_s()



    
